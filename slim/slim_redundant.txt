initialize() {
initializeMutationRate(0);
initializeRecombinationRate(0);
//define mutations m2 and m3, dominant and with fixed fitness effect of zero (fitness defined in generation 1, below)
initializeMutationType("m2", 1.0, "f", 0); // introduced mutation
initializeMutationType("m3", 1.0, "f", 0); // introduced mutation
//keep information on mutations after fixation/loss
m2.convertToSubstitution = F;
m3.convertToSubstitution = F;
//create two linkage groups, g1 and g2, on which m2 and m3 respectively and exclusively occur
initializeGenomicElementType("g1", m2, 1.0);
initializeGenomicElement(g1, 0, 99999);
initializeGenomicElementType("g2", m3, 1.0);
initializeGenomicElement(g2, 100000, 199999);
}

//initialise population of 500 diploid individuals
1 early() { sim.addSubpop("p1", 500); }

//in first generation, add mutations to 5 genomes each, at arbitrary but fixed position
1 late() {
target = sample(p1.genomes, 5);
target.addNewDrawnMutation(m2, 10000);
target = sample(p1.genomes, 5);
target.addNewDrawnMutation(m3, 189999);
}

//define fitness of mutations in each generation
//if genome carries the m3 mutation on either chromosome, m2 has half the fitness benefit (fitinccomb=0.15) as without (fitincabs=0.3)
mutationEffect(m2) {
	fitincabs = 0.3;
	fitinccomb = 0.15;
	if (individual.genome1.countOfMutationsOfType(m3))
		return effect + fitinccomb;
	else if (individual.genome2.countOfMutationsOfType(m3))
		return effect + fitinccomb;
	else
		return effect + fitincabs;
}

//if genome carries the m2 mutation on either chromosome, m3 has half the fitness benefit (fitinccomb=0.15) as without (fitincabs=0.3)
mutationEffect(m3) {
	fitincabs = 0.3;
	fitinccomb = 0.15;
	if (individual.genome1.countOfMutationsOfType(m2))
		return effect + fitinccomb;
	else if (individual.genome2.countOfMutationsOfType(m2))
		return effect + fitinccomb;
	else
		return effect + fitincabs;
}


500 late(){
sim.simulationFinished();
}
