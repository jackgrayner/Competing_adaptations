//change dominance coefficient using dominancecoef on line 47
//note: I am now using the fitnessEffect callback as it is more intuitive. I got very nearly identical results 
//using mutationEffect callbacks for each mutation separately, which are commented out at the end of the script, 
//and can be substituted for the fitnessEffect callbacks.

//fitness values should be changed per scenario as follows:
//additive fitness benefits: fullcomb=1.6; heterozygouscomb=1.3+(0.3*dominancecoef);fullsingle=1.3;heterozygousauto=1.0+(0.3*dominancecoef)
//non-additive fitness benefits: fullcomb=1.3; heterozygouscomb=1.3;fullsingle=1.3;heterozygousauto=1.0+(0.3*dominancecoef)
//negative fitness benefits: fullcomb=1.2; heterozygouscomb=1.3-(0.1*dominancecoef);fullsingle=1.3;heterozygousauto=1.0+(0.3*dominancecoef)
//for single-mutation sims just comment out lines 39&40 or 41&42, respectively, and use fullsingle=1.3;heterozygousauto=1.0+(0.3*dominancecoef)

initialize() {
	initializeMutationRate(0);
	initializeMutationType("m1", 1.0, "f", 0.0);// auto
	initializeMutationType("m2", 1.0, "f", 0.0);// X marker
	initializeMutationType("m3", 1.0, "f", 0.0);// Y marker
	initializeMutationType("m4", 1.0, "f", 0.0);// adaptive auto (Cw)
	initializeMutationType("m5", 1.0, "f", 0.0);// adaptive X (Fw)
	m4.convertToSubstitution = F;//prevent conversion as this will remove epistatic effects once either is fixed
	m5.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);     // PAR: m1 only 
	initializeGenomicElementType("g2", m2, 1.0); // non-PAR: m2 only //
	initializeGenomicElement(g1, 0, 99999);	//this is the 'autosomal' genomic element  
	initializeGenomicElement(g2, 100000, 199999);	//this is the 'X-linked' genomic element 
	initializeSex("A");  // turn on sex and model autosome s
	rates = c(0, 0.5, 0); ends = c(99999, 100000, 199999);
	initializeRecombinationRate(rates, ends); //force random segregation of g1 and g2 to simulate diff.
}
1 late() { // initialize the pop, with a Y marker for each male 
	sim.addSubpop("p1", 500);
	i = p1.individuals;
	i[i.sex == "M"].genome2.addNewMutation(m3, 0.0, 199999);
	i[i.sex == "F"].genome1.addNewMutation(m2, 0.0, 199999);
	mut = sim.mutationsOfType(m2);
	i[i.sex == "F"].genome2.addMutations(mut);
	i[i.sex == "M"].genome1.addMutations(mut);
	
	//now add adaptive mutations
	target = sample(i[i.sex=="M"].genome1, 5);
	target.addNewDrawnMutation(m4, 10000);
	target1 = sample(i[i.sex=="M"].genome1, 5);
	target1.addNewDrawnMutation(m5, 189999); //add X-linked mutation to 5 genomes
}

//fitnessEffect callbacks
fitnessEffect(){
	dominancecoef=0.75;

	fullcomb=1.6;//fitness of inidividual if autosomal mutation is homozygous and X-linked mutation also present
	heterozygouscomb=1.3+(0.3*dominancecoef);//fitness of inidividual if autosomal mutation is heterozygous and x-linked mutation also present
	fullsingle=1.3;//fitness of inidividual if only the x-linked mutation is present, OR if only the autosomal mutation is present and homozygous
	heterozygousauto=1.0+(0.3*dominancecoef);//fitness of individual if only the autosomal mutation is present, but heterozygous
	
	//additive scenario with h=0.5
	if (individual.genome1.countOfMutationsOfType(m4) & individual.genome2.countOfMutationsOfType(m4) & individual.genome1.countOfMutationsOfType(m5) & individual.sex == "M")
		return fullcomb;//if homozygous Cw, and Fw is on X, full summed fitness benefit
	else if (individual.countOfMutationsOfType(m4)  & individual.genome1.countOfMutationsOfType(m5) & individual.sex == "M") 
		return heterozygouscomb;//if heterozygous Cw, and Fw is on X, full benefit of Fw, half benefit of Cw
	else if (individual.genome1.countOfMutationsOfType(m5)  & individual.sex == "M")
		return fullsingle;//if Fw is on X, full Fw benefit
	else if (individual.genome1.countOfMutationsOfType(m4) & individual.genome2.countOfMutationsOfType(m4)  & individual.sex == "M")
		return fullsingle;//if Cw is homozygous, full Cw benefit
	else if (individual.countOfMutationsOfType(m4)  & individual.sex == "M")
		return heterozygousauto;//if Cw is heterozygous, half Cw benefit
	else
		return 1.0;	
}

modifyChild() {
	numX = sum(child.genomes.containsMarkerMutation(m2, 199999)); // num of m2 (X)
	numY = sum(child.genomes.containsMarkerMutation(m3, 199999)); // num of m3 (Y)
	numCw = sum(child.genomes.containsMarkerMutation(m4, 10000)); // num of m4 (Cw)
	numFw = sum(child.genomes.containsMarkerMutation(m5, 189999)); // num of m5 (Fw)
	numFwg2 = sum(child.genome2.containsMarkerMutation(m5, 189999)); // num of m5 (Fw) on g2
	if (child.sex == "M" & numFwg2>1 ) return F;//Fw should never be on male genome2
	
	//no male should have 2 Fw
	if (child.sex == "M" & numFw > 1) return F;
	
	if (numY > 1) stop("### ERROR: got too many Ys"); // females should have 0 Y's 
	if (child.sex == "F" & numY > 0) return F; // males should have 1 Y 
	if (child.sex == "M" & numY == 0) return F;
	if (child.sex == "F" & numX < 2) return F; // females should have 2 X 
	if (child.sex == "M" & numY > 1)
		return F;
	return T;
}

100 late(){
sim.simulationFinished();
outputFull();
}


//mutationEffect code
////define fitness of mutations
//mutationEffect(m4) {//auto mutation
//	
//	domcoeff=0.75;//dominance coefficient
//	fitincabs = 0.3;//fit benefit when m5 is absent (this is 0.3 in all scenarios)
//	fitinccomb = 0.265;//fit benefit when m5 is present (this is 0.14 in non-additive scenario, 0.095 in negative scenario)
//	
//	if (individual.genome1.countOfMutationsOfType(m5) & individual.sex == "M")
//		 if (homozygous) //in non-additive scenario, comment out homozygous if statement
//			return 1.0 + fitinccomb;//if m4 homozygous, full combined fitness benefit
//		else//in non-additive scenario, ignore m4 heterozygosity here
//			return 1.0 + fitinccomb*domcoeff;//if m4 is heterozygous, multiply by dominance coefficient
//	else if (individual.sex == "M")
//		if (homozygous)
//			return 1.0 + fitincabs;//if m4 homozygous, full individual fitness benefit
//		else
//			return 1.0 + fitincabs*domcoeff;//if m4 is heterozygous, multiply by dominance coefficient
//	else
//		return 1.0;
//}
//mutationEffect(m5) {//X mutation
//	//m5 is x-linked. so only the maternal (genome1) copy provides fitness benefits to males
//	domcoeff=0.75;//dominance coefficient	
//	fitincabs = 0.3;//fit benefit when m4 absent
//	fitinccomb = 0.265;//fit benefit when m5 present
//	// dominance coefficient does not apply to m5 as can only be hemizygous
//	if (individual.countOfMutationsOfType(m4) & individual.sex == "M")
//			return 1.0 + fitinccomb;//if m4 present, combined fitness benefit
//	//genome2 is ignored because it's inherited from male parent
//	else if (individual.sex == "M")
//		return 1.0 + fitincabs;
//	else
//		return 1.0;
//}
